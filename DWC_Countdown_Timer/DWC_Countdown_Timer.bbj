REM /**
REM  * This app is a countdown timer created for the BASIS DWC, using BBj and CSS
REM  *It accepts user input for hours, minutes, and seconds and after pressing start, will countdown to 00:00:00 by the second
REM  */

use java.nio.file

sysgui = unt

open (sysgui)"X0"
bbj! = BBjAPI()
sysgui! = bbj!.getSysGui()
tc! = bbj!.getThinClient()
web! = bbj!.getWebManager()

cssFilePath! = dsk("") + dir("") + "stylesheet.css"
print "cssFilePath: ", cssFilePath!
css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(cssFilePath!))
BBjAPI().getWebManager().injectStyle(css!, 0, "id=my_custom_css") 

title$ = "DWC Countdown Timer"

transparent! = sysgui!.makeColor(250, 250, 250, 0)

window! = sysgui!.addWindow(title$, $01111000$)
window!.setCallback(window!.ON_CLOSE,"eoj")
window!.addClass("window")



rem ------------------------------------------------------------------------- 'inputs'
rem 'window to contain inputs'
inputBG! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
inputBG!.addClass("input-bg")

hoursInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 23)
hoursInput!.addClass("input-spinner")
hours! = "hours"
hoursText! = inputBG!.addStaticText(hours!)
hoursText!.addClass("input-label")

minutesInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 59)
minutesInput!.addClass("input-spinner")
min! = "min"
minText! = inputBG!.addStaticText(min!)
minText!.addClass("input-label")

secondsInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 59)
secondsInput!.addClass("input-spinner")
sec! = "sec"
secText! = inputBG!.addStaticText(sec!)
secText!.addClass("input-label")


rem ------------------------------------------------------------------------- 'buttons'

buttonWindow! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
buttonWindow!.addClass("button-window")

rem 'start button'
startButton! = buttonWindow!.addButton("Start")
startButton!.setCallback(startButton!.ON_BUTTON_PUSH, "startTimer")
startButton!.setNoEdge(1)
startButton!.addClass("start-button")

rem 'resume button'
resumeButton! = buttonWindow!.addButton("Resume")
resumeButton!.setCallback(resumeButton!.ON_BUTTON_PUSH, "resumeTimer")
resumeButton!.setNoEdge(1)
resumeButton!.addClass("resume-button")
resumeButton!.setVisible(0)

rem 'pause button'
pauseButton! = buttonWindow!.addButton("Pause")
pauseButton!.setCallback(pauseButton!.ON_BUTTON_PUSH, "pauseTimer")
pauseButton!.setNoEdge(1)
pauseButton!.addClass("pause-button")
pauseButton!.setVisible(0)

rem 'cancel button'
cancelButton! = buttonWindow!.addButton("Cancel")
cancelButton!.setCallback(cancelButton!.ON_BUTTON_PUSH, "cancelTimer")
cancelButton!.setNoEdge(1)
cancelButton!.addClass("cancel-button")
cancelButton!.setVisible(0)


rem ----------------------------------------------------------------------- 'user functions'
DEF FNConvertTime! (timeRemaining!) 
    timeIndicator!.destroy()
    timeRemaining! = timeRemaining! - 1000
    currentTime! = currentTime! + 1000
      
    seconds! = INT(timeRemaining! / 1000)
    minutes! = INT(seconds! / 60)
    hoursRemaining! = INT(minutes! / 60)
      
    if seconds! >= 60 then 
        secondsRemaining! = MOD(seconds!, 60)
    else
        secondsRemaining! = seconds!
    endif
      
    if minutes! >= 60 then 
        minutesRemaining! = MOD(minutes!, 60)
    else
        minutesRemaining! = minutes!
    endif
      
    hoursInput!.setValue(hoursRemaining!)
    minutesInput!.setValue(minutesRemaining!)
    secondsInput!.setValue(secondsRemaining!)
    
    
    if (hoursRemaining! > 0) then timeRemainingString! = STR(hoursRemaining!) + " : " + STR(minutesRemaining!) + " : " + STR(secondsRemaining!)
    if (hoursRemaining! = 0) AND (minutesRemaining! > 0) then timeRemainingString! = STR(minutesRemaining!) + " : " + STR(secondsRemaining!)
    if (hoursRemaining! = 0) AND (minutesRemaining! = 0) AND (secondsRemaining! > 0) then timeRemainingString! = " : " + STR(secondsRemaining!)
    
    timeIndicatorWindow! = clockFace!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    timeIndicatorWindow!.addClass("time-indicator-window")
    timeIndicator! = timeIndicatorWindow!.addStaticText(timeRemainingString!)
    timeIndicator!.addClass("time-indicator")
    
    RETURN timeRemainingString!
FNEND

startTime! = 0

process_events

startTimer: 
        startButton!.setVisible(0)
        pauseButton!.setVisible(1)
        cancelButton!.setVisible(1)
        inputBG!.setVisible(0)
        
        hours! = hoursInput!.getValue()
        minutes! = minutesInput!.getValue()
        seconds! = secondsInput!.getValue()
        
REM     time variables for clock css animations
        totalTimeInSec! = (hours! *  3600) + (minutes! * 60) + (seconds!)
        halfTime! = totalTimeInSec! / 2
        totalTimeString! = STR(totalTimeInSec!)
        halfTimeString! = STR(halfTime!) 

REM     time variables for calculating remaining time
        hoursToMS! = hours! * 3600000
        minutesToMS! = minutes! * 60000
        secondsToMS! = seconds! * 1000
        totalTime! = hoursToMS! + minutesToMS! + secondsToMS!
        timeRemaining! = totalTime!
        currentTime! = startTime! * 3600000
        futureTime! = totalTime! + currentTime!
        
REM         if (hours! > 0) then timeRemainingString! = STR(hours!) + " : " + STR(minutes!) + " : " + STR(seconds!)
REM         if (hours! = 0) AND (minutes! > 0) then timeRemainingString! = STR(minutes!) + " : " + STR(seconds!)
REM         if (hours! = 0) AND (minutes! = 0) AND (seconds! > 0) then timeRemainingString! = " : " + STR(seconds!)
REM calculateTime! = FNConvertTime!(timeRemaining!)
   
REM         if (hours! > 0) OR (minutes! > 0) OR (seconds! > 0) then
REM             if (startTime! = 0) then startTime! = TIM
REM             bbj!.createTimer(oneSecTimer, 1, "calculateTime")
REM         else
REM             noInputMessage! = msgBox("Please enter your desired time", 0 + 48, "Start timer")
REM         endif
        
        clockContainer! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockContainer!.addClass("clock-container")
    
        timerColorIndicator! = clockContainer!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        timerColorIndicator!.addClass("timer-color-indicator")
    
        clockRight! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockRight!.addClass("clock-right")
        clockRight!.addClass("clock-rotate-end")
        web!.injectStyle(".clock-rotate-end { "+
:           "animation-delay: " + halfTimeString! + "s !important;"+
:           "animation-duration: " + halfTimeString! + "s !important;"+
:        "}")
    
        clockLeft! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockLeft!.setBorderColor(transparent!)
        clockLeft!.addClass("clock-left")
        clockLeft!.addClass("clock-rotate-start")
        
        web!.injectStyle(".clock-rotate-start { "+
:           "animation-delay: 0s, " + halfTimeString! + "s !important;"+
:           "animation-duration: " + halfTimeString! + "s, 0s !important;"+
:       "}")
        
        clockFace! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockFace!.addClass("clock-face")
       
REM         timeIndicatorWindow! = clockFace!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM         timeIndicatorWindow!.addClass("time-indicator-window")
REM         timeIndicator! = timeIndicatorWindow!.addStaticText(calculateTime!)
REM         timeIndicator!.addClass("time-indicator")
        
REM         calculateTime! = FNConvertTime!(timeRemaining!)
        
return

pauseTimer:
    pauseButton!.setVisible(0)
    resumeButton!.setVisible(1)
    
    rem 'code to pause timer'    
    
    rem 'code to pause animation'
    pauseAnimationStart! = ".clock-rotate-start { animation-play-state: paused !important; }"
    pauseAnimationEnd! = ".clock-rotate-end { animation-play-state: paused !important; }"
    web!.injectStyle(pauseAnimationStart!)
    web!.injectStyle(pauseAnimationEnd!)
    
return

resumeTimer:
    pauseButton!.setVisible(1)
    resumeButton!.setVisible(0)
    
    rem 'code to resume animation'
    resumeAnimationStart! = ".clock-rotate-start { animation-play-state: running !important; }"
    resumeAnimationEnd! = ".clock-rotate-end { animation-play-state: running !important; }"
    web!.injectStyle(resumeAnimationStart!)
    web!.injectStyle(resumeAnimationEnd!)
    
return

cancelTimer:
    cancelButton!.setVisible(0)
    if (pauseButton!.isVisible() = 1) then pauseButton!.setVisible(0)
    if (resumeButton!.isVisible() = 1) then resumeButton!.setVisible(0)
    startButton!.setVisible(1)
    inputBG!.setVisible(1)
    timerColorIndicator!.destroy()
    hoursInput!.setValue(00)
    minutesInput!.setValue(00)
    secondsInput!.setValue(00)
    
return

calculateTime:

REM     hours! = hoursInput!.getValue()
REM     minutes! = minutesInput!.getValue()
REM     seconds! = secondsInput!.getValue()
REM     
REM     hoursToMS! = hours! * 3600000
REM     minutesToMS! = minutes! * 60000
REM     secondsToMS! = seconds! * 1000
REM     
REM     totalTime1! = hoursToMS! + minutesToMS! + secondsToMS!
REM     timeRemaining! = totalTime!
REM     currentTime! = startTime! * 3600000
REM     futureTime! = totalTime! + currentTime!
    
REM     calculateTime! = FNConvertTime!(timeRemaining!)

return
eoj:
    release