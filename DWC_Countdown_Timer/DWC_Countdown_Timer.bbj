REM /**
REM  * This app is a countdown timer created for the BASIS DWC, using BBj and CSS
REM  *It accepts user input for hours, minutes, and seconds and after pressing start, will countdown to 00:00:00 by the second
REM  * The user is then prompted to repeat timer or not. If repeat is confirmed the timer will start over with the original time input.
REM  * If denied, the user is brought back to the beginning page of the app
REM  */

use java.nio.file

sysgui = unt

open (sysgui)"X0"
bbj! = BBjAPI()
sysgui! = bbj!.getSysGui()
web! = bbj!.getWebManager()

cssFilePath! = dsk("") + dir("") + "stylesheet.css"
print "cssFilePath: ", cssFilePath!
css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(cssFilePath!))
web!.injectStyle(css!, 0, "id=my_custom_css") 

title$ = "DWC Countdown Timer"


window! = sysgui!.addWindow(title$, $01111000$)
window!.setCallback(window!.ON_CLOSE,"eoj")
window!.addClass("window")

transparent! = sysgui!.makeColor(250, 250, 250, 0)

rem ------------------------------------------------------------------------- 'inputs'
rem 'window to contain inputs'
inputBG! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
inputBG!.addClass("input-bg")

hoursInput! = inputBG!.addInputNSpinner($0020$, "##", 0, 23)
hoursInput!.addClass("input-spinner")
hours! = "hours"
hoursText! = inputBG!.addStaticText(hours!)
hoursText!.addClass("input-label")

minutesInput! = inputBG!.addInputNSpinner($0020$, "##", 0, 59)
minutesInput!.addClass("input-spinner")
min! = "min"
minText! = inputBG!.addStaticText(min!)
minText!.addClass("input-label")

secondsInput! = inputBG!.addInputNSpinner($0020$, "##", 0, 59)
secondsInput!.addClass("input-spinner")
sec! = "sec"
secText! = inputBG!.addStaticText(sec!)
secText!.addClass("input-label")


rem ------------------------------------------------------------------------- 'buttons'

buttonWindow! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
buttonWindow!.addClass("button-window")

rem 'start button'
startButton! = buttonWindow!.addButton("Start")
startButton!.setCallback(startButton!.ON_BUTTON_PUSH, "startTimer")
startButton!.setNoEdge(1)
startButton!.addClass("start-button")

rem 'resume button'
resumeButton! = buttonWindow!.addButton("Resume")
resumeButton!.setCallback(resumeButton!.ON_BUTTON_PUSH, "resumeTimer")
resumeButton!.setNoEdge(1)
resumeButton!.addClass("resume-button")
resumeButton!.setVisible(0)

rem 'pause button'
pauseButton! = buttonWindow!.addButton("Pause")
pauseButton!.setCallback(pauseButton!.ON_BUTTON_PUSH, "pauseTimer")
pauseButton!.setNoEdge(1)
pauseButton!.addClass("pause-button")
pauseButton!.setVisible(0)

rem 'cancel button'
cancelButton! = buttonWindow!.addButton("Cancel")
cancelButton!.setCallback(cancelButton!.ON_BUTTON_PUSH, "cancelTimer")
cancelButton!.setNoEdge(1)
cancelButton!.addClass("cancel-button")
cancelButton!.setVisible(0)


rem ----------------------------------------------------------------------- 'calculate time function'
DEF FNConvertTime! (timeRemaining!) 
    timeRemaining! = timeRemaining! - 1000
    currentTime! = currentTime! + 1000
      
    seconds! = INT(timeRemaining! / 1000)
    minutes! = INT(seconds! / 60)
    hoursRemaining! = INT(minutes! / 60)
      
    if (seconds! >= 60) then 
        secondsRemaining! = MOD(seconds!, 60)
    else
        secondsRemaining! = seconds!
    endif
      
    if (minutes! >= 60) then 
        minutesRemaining! = MOD(minutes!, 60)
    else
        minutesRemaining! = minutes!
    endif
      
    hoursInput!.setValue(hoursRemaining!)
    minutesInput!.setValue(minutesRemaining!)
    secondsInput!.setValue(secondsRemaining!)

    RETURN timeRemaining!
FNEND

startTime! = 0
timeWindowCreated! = 0

REM 'set action when app ends - refresh page'
REM '.urlAction() - constructs a BBjBuiUrlCloseAction object to load a specified URL'
REM '.getUrl() - returns URL of current page'
refresh! = web!.urlAction(web!.getUrl())
web!.setEndAction(refresh!)

process_events


startTimer: 
    hours! = hoursInput!.getValue()
    minutes! = minutesInput!.getValue()
    seconds! = secondsInput!.getValue()
    
    REM 'variables used for repeat timer function'
    initialHours! = hours!
    initialMinutes! = minutes!
    initialSeconds! = seconds!
    
    REM 'check to see if user inputted any time else start timer'
    if (hours! = 0) AND (minutes! = 0) AND (seconds! = 0) then
        noInputMessage! = msgbox("No Time Selected", 0 + 48, "Start Timer Error")
        return
    else
        if (startTime! = 0) then startTime! = TIM
        startButton!.setVisible(0)
        pauseButton!.setVisible(1)
        cancelButton!.setVisible(1)
        inputBG!.setVisible(0)
        
        REM 'time variables for clock css animations'
        totalTimeInSec! = (hours! *  3600) + (minutes! * 60) + (seconds!)
        halfTime! = totalTimeInSec! / 2
        totalTimeString! = STR(totalTimeInSec!)
        halfTimeString! = STR(halfTime!) 

        REM 'UI'
        clockContainer! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockContainer!.addClass("clock-container")
    
        timerColorIndicator! = clockContainer!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        timerColorIndicator!.addClass("timer-color-indicator")
    
        clockRight! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockRight!.addClass("clock-right")
        clockRight!.addClass("clock-rotate-end")
        web!.injectStyle(".clock-rotate-end { "+
:           "animation-delay: " + halfTimeString! + "s !important;"+
:           "animation-duration: " + halfTimeString! + "s !important;"+
:        "}")
    
        clockLeft! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockLeft!.setBorderColor(transparent!)
        clockLeft!.addClass("clock-left")
        clockLeft!.addClass("clock-rotate-start")
        
        web!.injectStyle(".clock-rotate-start { "+
:           "animation-delay: 0s, " + halfTimeString! + "s !important;"+
:           "animation-duration: " + halfTimeString! + "s, 0s !important;"+
:       "}")
        
        clockFace! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
        clockFace!.addClass("clock-face")
        
        REM 'set one second timer to update time remaining'
        bbj!.createTimer(oneSecTimer, 1, "calculateTime")
    endif
    

calculateTime:
    if (timeWindowCreated! = 1) then timeIndicatorWindow!.destroy()
    timeWindowCreated! = 0
        
    hours! = hoursInput!.getValue()
    minutes! = minutesInput!.getValue()
    seconds! = secondsInput!.getValue()

    REM 'time variables for calculating remaining time'
    hoursToMS! = hours! * 3600000
    minutesToMS! = minutes! * 60000
    secondsToMS! = seconds! * 1000
    totalTime! = hoursToMS! + minutesToMS! + secondsToMS!
    timeRemaining! = totalTime!
    currentTime! = startTime! * 3600000
    futureTime! = totalTime! + currentTime!
    
    REM 'format time for clock display'
    if (hours! > 0) then timeRemainingString! = STR(hours!: "00") + " : " + STR(minutes!: "00") + " : " + STR(seconds!: "00")
    if (hours! = 0) AND (minutes! > 0) then timeRemainingString! = STR(minutes!: "00") + " : " + STR(seconds!: "00")
    if (hours! = 0) AND (minutes! = 0) AND (seconds! >= 0) then timeRemainingString! = " : " + STR(seconds!: "00")
    
    REM 'when time is up'
    if (hours! = 0) AND (minutes! = 0) AND (seconds! = 0) then 
        bbj!.removeTimer(oneSecTimer)
    
        REM 'option to repeat timer or cancel and go back to start'
        repeatTimer! = msgbox("Repeat Timer?", 4 + 32 + 0 + 0, "Time's Up!")
        
        rem 'yes'
        if (repeatTimer!) = 6 then
            hoursInput!.setValue(initialHours!)
            minutesInput!.setValue(initialMinutes!)
            secondsInput!.setValue(initialSeconds!)
            GOTO startTimer
        endif
        
        rem 'no'
        if (repeatTimer! = 7) then
            GOTO eoj
        endif  
    endif
    
    REM 'call function to calculate time'
    calculateTime! = FNConvertTime!(timeRemaining!) 
    
    REM 'display current remaining time'
    timeIndicatorWindow! = clockFace!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    timeIndicatorWindow!.addClass("time-indicator-window")
    timeIndicator! = timeIndicatorWindow!.addStaticText(timeRemainingString!)
    timeIndicator!.addClass("time-indicator")
    timeWindowCreated! = 1

return


pauseTimer:
    pauseButton!.setVisible(0)
    resumeButton!.setVisible(1)   
    
    rem 'pause animation'
    pauseAnimationStart! = ".clock-rotate-start { animation-play-state: paused !important; }"
    pauseAnimationEnd! = ".clock-rotate-end { animation-play-state: paused !important; }"
    web!.injectStyle(pauseAnimationStart!)
    web!.injectStyle(pauseAnimationEnd!)

    rem 'pause timer'
    bbj!.removeTimer(oneSecTimer)   
    
return


resumeTimer:
    pauseButton!.setVisible(1)
    resumeButton!.setVisible(0)
    
    rem 'resume animation'
    resumeAnimationStart! = ".clock-rotate-start { animation-play-state: running !important; }"
    resumeAnimationEnd! = ".clock-rotate-end { animation-play-state: running !important; }"
    web!.injectStyle(resumeAnimationStart!)
    web!.injectStyle(resumeAnimationEnd!)
    
    rem 'resume timer'
    bbj!.createTimer(oneSecTimer, 1, "calculateTime")
    
return


cancelTimer:
REM 'option to repeat timer or cancel and go back to start'
    cancelTimer! = msgbox("Are you sure you want to cancel timer?", 4 + 48 + 0 + 0, "Cancel Timer")       
        
    rem 'yes'
    if (cancelTimer!) = 6 then
        GOTO eoj
    endif
        
    rem 'no'
    if (cancelTimer! = 7) then
        return
    endif  
    
return


eoj:
    release