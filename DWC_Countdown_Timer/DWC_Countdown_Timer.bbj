REM /**
REM  * This app is a countdown timer created for the BASIS DWC, using BBj and CSS
REM  *It accepts user input for hours, minutes, and seconds and after pressing start, will countdown to 00:00:00 by the second
REM  */

use java.nio.file

sysgui = unt

open (sysgui)"X0"
bbj! = BBjAPI()
sysgui! = bbj!.getSysGui()
tc! = bbj!.getThinClient()

cssFilePath! = dsk("") + dir("") + "stylesheet.css"
print "cssFilePath: ", cssFilePath!
css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(cssFilePath!))
BBjAPI().getWebManager().injectStyle(css!, 0, "id=my_custom_css") 

title$ = "DWC Countdown Timer"

transparent! = sysgui!.makeColor(250, 250, 250, 0)

window! = sysgui!.addWindow(50, 50, 700, 750, title$, $00010000$)
window!.setCallback(window!.ON_CLOSE,"eoj")
window!.addClass("window")

rem 'use play button icon in button instead of the word "start"'
startButton! = window!.addButton(5, 300, 680, 100, 50, "Start", $0020$)
startButton!.setCallback(startButton!.ON_BUTTON_PUSH, "startTimer")

rem ------------------------------------------------------------------------- 'time selection'







process_events

startTimer:
    pauseButton! = window!.addButton(6, 580, 630, 100, 100, "Pause", $0020$)
    pauseButton!.addClass("pause-button")
REM     pauseButton!.removeClass(".control")
    pauseButton!.setCallback(pauseButton!.ON_BUTTON_PUSH, "pauseTimer")
    pauseButton!.setNoEdge(1)
    
    cancelButton! = window!.addButton(7, 20, 630, 100, 100, "Cancel", $0020$)
    cancelButton!.setCallback(cancelButton!.ON_BUTTON_PUSH, "cancelTimer")
    cancelButton!.addClass("cancel-button-enabled")
    
    startButton!.setVisible(0)
    timerColorIndicator! = window!.addChildWindow(1, 50, 50, 600, 600, "", $$, 1, $$)
    timerColorIndicator!.addClass("timer-color-indicator")
    timerColorIndicator!.setBorderColor(transparent!)
    
    clockRight! = timerColorIndicator!.addChildWindow(3, 0, 0, 600, 600, "", $$, 3, $$)
    clockRight!.addClass("clock-right")
    clockRight!.setBorderColor(transparent!)
    rem 'add this class after 1/2 the time has passed'
    clockRight!.addClass("clock-rotate-end")
    
    clockLeft! = timerColorIndicator!.addChildWindow(2, 0, 0, 600, 600, "", $$, 2, $$)
    clockLeft!.addClass("clock-left")
    clockLeft!.setBorderColor(transparent!)
    rem 'add this class when user clicks on start timer' - needs to feed user input to the css file
    clockLeft!.addClass("clock-rotate-start")
    rem 'add this class after 1/2 the time has passed'
    REM clockLeft!.addClass("clock-left-change-color")
    
    clockRight! = timerColorIndicator!.addChildWindow(4, 10, 10, 580, 580, "", $$, 4, $$)
    clockRight!.addClass("clock-face")
    clockRight!.setBorderColor(transparent!)
return

pauseTimer:
    pauseMessage = msgbox("you paused the timer", 0 + 64, "Pause timer")
    rem 'code to pause timer'
    
    rem 'change pause button to resume button'
return

cancelTimer:
    cancelMessage = msgbox("you canceled the timer", 0 + 64, "Cancel timer")
return

eoj:
    release