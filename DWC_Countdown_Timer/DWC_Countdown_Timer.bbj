REM /**
REM  * This app is a countdown timer created for the BASIS DWC, using BBj and CSS
REM  *It accepts user input for hours, minutes, and seconds and after pressing start, will countdown to 00:00:00 by the second
REM  */

use java.nio.file

sysgui = unt

open (sysgui)"X0"
bbj! = BBjAPI()
sysgui! = bbj!.getSysGui()
tc! = bbj!.getThinClient()
web! = bbj!.getWebManager()

cssFilePath! = dsk("") + dir("") + "stylesheet.css"
print "cssFilePath: ", cssFilePath!
css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(cssFilePath!))
BBjAPI().getWebManager().injectStyle(css!, 0, "id=my_custom_css") 

title$ = "DWC Countdown Timer"

transparent! = sysgui!.makeColor(250, 250, 250, 0)

window! = sysgui!.addWindow(title$, $01111000$)
window!.setCallback(window!.ON_CLOSE,"eoj")
window!.addClass("window")



rem ------------------------------------------------------------------------- 'inputs'
rem 'window to contain inputs'
inputBG! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
inputBG!.addClass("input-bg")


hoursInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 23)
hoursInput!.addClass("input-spinner")
hours! = "hours"
hoursText! = inputBG!.addStaticText(hours!)
hoursText!.addClass("input-label")

minutesInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 59)
minutesInput!.addClass("input-spinner")
min! = "min"
minText! = inputBG!.addStaticText(min!)
minText!.addClass("input-label")

secondsInput! = inputBG!.addInputNSpinner($0020$, "#00", $10$, 00, 00, 0, 59)
secondsInput!.addClass("input-spinner")
sec! = "sec"
secText! = inputBG!.addStaticText(sec!)
secText!.addClass("input-label")

if (hoursInput!.getValue() = null) then hoursInput!.setValue(00)



rem ------------------------------------------------------------------------- 'buttons'

buttonWindow! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
buttonWindow!.addClass("button-window")

rem 'start button'
startButton! = buttonWindow!.addButton("Start")
startButton!.setCallback(startButton!.ON_BUTTON_PUSH, "startTimer")
startButton!.setNoEdge(1)
startButton!.addClass("start-button")

rem 'resume button'
resumeButton! = buttonWindow!.addButton("Resume")
resumeButton!.setCallback(resumeButton!.ON_BUTTON_PUSH, "resumeTimer")
resumeButton!.setNoEdge(1)
resumeButton!.addClass("resume-button")
resumeButton!.setVisible(0)

rem 'pause button'
pauseButton! = buttonWindow!.addButton("Pause")
pauseButton!.setCallback(pauseButton!.ON_BUTTON_PUSH, "pauseTimer")
pauseButton!.setNoEdge(1)
pauseButton!.addClass("pause-button")
pauseButton!.setVisible(0)

rem 'cancel button'
cancelButton! = buttonWindow!.addButton("Cancel")
cancelButton!.setCallback(cancelButton!.ON_BUTTON_PUSH, "cancelTimer")
cancelButton!.setNoEdge(1)
cancelButton!.addClass("cancel-button")
cancelButton!.setVisible(0)


process_events

startTimer:
    startButton!.setVisible(0)
    pauseButton!.setVisible(1)
    cancelButton!.setVisible(1)
    inputBG!.setVisible(0)
      
    clockContainer! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    clockContainer!.addClass("clock-container")

    timerColorIndicator! = clockContainer!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    timerColorIndicator!.addClass("timer-color-indicator")

    clockRight! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    clockRight!.addClass("clock-right")
    rem 'add this class after 1/2 the time has passed'
    clockRight!.addClass("clock-rotate-end")

    clockLeft! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    clockLeft!.setBorderColor(transparent!)
    clockLeft!.addClass("clock-left")
    rem 'add this class when user clicks on start timer' - needs to feed user input to the css file
    clockLeft!.addClass("clock-rotate-start")
    rem 'add this class after 1/2 the time has passed'
    clockLeft!.addClass("clock-left-change-color")
    
    clockFace! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
    clockFace!.addClass("clock-face")
     
    hoursRemaining! = 02
    minutesRemaining! = 24
    secondsRemaining! = 36
    
    rem 'if hours is > 0, display time format 00:00:00'
    if (hoursRemaining! > 0) then timeRemaining! = STR(hoursRemaining!) + " : " + STR(minutesRemaining!) + " : " + STR(secondsRemaining!)
    rem 'if minutes is > 0, display time format 00:00'
    if (hoursRemaining! = 0 AND minutesRemaining! > 0) then timeRemaining! = STR(minutesRemaining!) + " : " + STR(secondsRemaining!)
    rem 'if only seconds left, display time format :00'
    if (hoursRemaining! = 0 AND minutesRemaining! = 0 AND secondsRemaining! > 0) then timeRemaining! = " : " + STR(secondsRemaining!)
    
    timeIndicator! = clockFace!.addStaticText(12, 0, 0, 580, 580, timeRemaining!)
    timeIndicator!.addClass("time-indicator")
    
    
return


REM 
REM secondsInput% = 35
REM 
REM STR(secondsInput%)
REM BBjApi().getWebManager().injectStyle(".classname: " + str(secondsInput%) + s; next variable



pauseTimer:
    pauseButton!.setVisible(0)
    resumeButton!.setVisible(1)
    
    rem 'code to pause timer'    
    
    rem 'code to pause animation'
    pauseAnimationStart! = ".clock-rotate-start { animation-play-state: paused !important; }"
    pauseAnimationEnd! = ".clock-rotate-end { animation-play-state: paused !important; }"
    web!.injectStyle(pauseAnimationStart!)
    web!.injectStyle(pauseAnimationEnd!)
    
return

resumeTimer:
    pauseButton!.setVisible(1)
    resumeButton!.setVisible(0)
    
    rem 'code to resume animation'
    resumeAnimationStart! = ".clock-rotate-start { animation-play-state: running !important; }"
    resumeAnimationEnd! = ".clock-rotate-end { animation-play-state: running !important; }"
    web!.injectStyle(resumeAnimationStart!)
    web!.injectStyle(resumeAnimationEnd!)
return

cancelTimer:
    cancelButton!.setVisible(0)
    if (pauseButton!.isVisible() = 1) then pauseButton!.setVisible(0)
    if (resumeButton!.isVisible() = 1) then resumeButton!.setVisible(0)
    startButton!.setVisible(1)
    inputBG!.setVisible(1)
    timerColorIndicator!.destroy()
return

eoj:
    release